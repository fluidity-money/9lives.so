#!/usr/bin/env -S rc -e

# Automated script to make a market that assumes the following:

# 1. The user has enough starting liquidity for $2, and for however much
# they want to allocate as an argument here.

# 2. The user has provided some amounts to buy both sides with. These
# will be used for an initial purchase. The first outcome is assumed to be the
# "No" case, and the second the "Yes" case.

# 3. The user has provided a valid admin secret, as this script assumes
# a permissioned user using one of the private oracle types (ie, the
# PRICE_ORACLE oracle type).

# At each step, environment variables will be printed which can be set
# to restart from the point after which they were printed.

fee_lp=3
fee_minter=3
fee_referrer=3
backend_is_dppm=true

if(~ $OUTCOME_0_SEED '') OUTCOME_0_SEED=`{date +%s%3N}
if(~ $OUTCOME_1_SEED '') OUTCOME_1_SEED=`{date +%s%3N}

fn usage_args {
	echo `{basename $0} '([0-9]+),?..' >[1=2]
	exit 2
}

fn usage_envs {
	echo '<SPN_SUPERPOSITION_URL> <SPN_SUPERPOSITION_KEY> <SPN_SENDER_ADDR> <SPN_BUY_HELPER2> <SPN_ADMIN_SECRET> <SPN_FUSDC_ADDR> <SPN_BASE_ASSET> <SPN_QUOTE_ASSET> <SPN_DEADLINE> <SPN_STARTED_BY> <SPN_END_QUOTE_PRICE> <SPN_ORACLE_ADDR> <SPN_FACTORY_ADDR> unset' >[1=2]
	exit 2
}

if(test `{echo $* | wc -w} -lt 2) \
	usage_args

sum=`{{ for(n) echo $n } | awk '{ sum += $1 } END { print sum }' }

if(~ \
	$SPN_SUPERPOSITION_URL \
	$SPN_SUPERPOSITION_KEY \
	$SPN_SENDER_ADDR \
	$SPN_BUY_HELPER2 \
	$SPN_ADMIN_SECRET \
	$SPN_FUSDC_ADDR \
	$SPN_BASE_ASSET \
	$SPN_QUOTE_ASSET \
	'' \
) \
	usage_envs

if(~ \
	$SPN_STARTED_BY \
	$SPN_DEADLINE \
	$SPN_END_QUOTE_PRICE \
	$SPN_ORACLE_ADDR \
	$SPN_FACTORY_ADDR ) \
	'' \
) \
	usage_envs

echo OUTCOME_0_SEED=$OUTCOME_0_SEED >[1=2]
echo OUTCOME_1_SEED=$OUTCOME_1_SEED >[1=2]

fn send {
	cast send \
		--json \
		--rpc-url $SPN_SUPERPOSITION_URL \
		--private-key $SPN_SUPERPOSITION_KEY \
		$*
}

fn call {
	cast call \
		--json \
		--rpc-url $SPN_SUPERPOSITION_URL \
		--private-key $SPN_SUPERPOSITION_KEY \
		$* \
			| jq -r '.[0]'
}

fn take_outcome_id {
	shasum -a512 | cut -f1 | dd bs=1 count=8 status=none
}

fn big_endian {
	python3 -c '
import struct
print(struct.pack(''>Q'', int(input())).hex())'
}

outcome_0_desc=`{echo $SPN_BASE_ASSET will end up below '$'$SPN_END_QUOTE_PRICE before $SPN_DEADLINE}
outcome_1_desc=`{echo $SPN_BASE_ASSET will end up above '$'$SPN_END_QUOTE_PRICE before $SPN_DEADLINE}
outcome_0_seed_hex=`{echo $OUTCOME_0_SEED | big_endian }
outcome_1_seed_hex=`{echo $OUTCOME_1_SEED | big_endian }

outcome_0_id=0x`{echo -n $outcome_0_desc$outcome_0_seed_hex | take_outcome_id }
outcome_1_id=0x`{echo -n $outcome_1_desc$outcome_1_seed_hex | take_outcome_id }

outcome_args='[('$outcome_0_id','$*(1)','$"outcome_0_desc'),('$outcome_1_id','$*(1)','$"outcome_1_desc')]'

documentation=''

documentation_h=`{echo -n $documentation | shasum -a512 | cut -f1}

allowance=`{\
	call $SPN_FUSDC_ADDR 'allowance(address,address)(uint256)' \
		$SPN_SENDER_ADDR \
		$SPN_BUY_HELPER2 \
}

if(test $allowance -lt $sum) {
	send \
		$SPN_FUSDC_ADDR \
		'approve(address,uint256)' \
		$SPN_BUY_HELPER2 \
		$sum
}

send \
	$SPN_FACTORY_ADDR \
	'newTrading3F989FB1((bytes8,uint256,string)[],address,uint64,uint64,bytes32,address,uint64,uint64,uint64,uint64,bool)' \
	$outcome_args \
	$SPN_STARTED_BY \
	$SPN_DEADLINE \
	$documentation \
	$SPN_SENDER_ADDR \
	$fee_creator \
	$fee_lp \
	$fee_minter \
	$fee_referrer \
	true
