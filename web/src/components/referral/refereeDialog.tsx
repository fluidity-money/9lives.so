"use client";

import LoadingIndicator from "../loadingIndicator";
import { Fragment, useState } from "react";
import { useActiveAccount } from "thirdweb/react";
import Button from "../themed/button";
import { Tab, TabGroup, TabList, TabPanel, TabPanels } from "@headlessui/react";
import TabButton from "../tabButton";
import toast from "react-hot-toast";
import useConnectWallet from "@/hooks/useConnectWallet";
import useSenderByCode from "@/hooks/useSenderByCode";
import { signMessage } from "thirdweb/utils";
import { associateReferral } from "@/providers/graphqlClient";
import { Signature } from "ethers";

export default function RefereeDialog({
  code,
  close,
}: {
  code: string;
  close: () => void;
}) {
  const account = useActiveAccount();
  const { connect } = useConnectWallet();
  const {
    data: referrer,
    isSuccess,
    isError,
    error,
    isLoading,
  } = useSenderByCode(code);
  const [inProgress, setInProgress] = useState(false);
  async function signAndConfim() {
    if (!account) return connect();
    toast.promise(
      new Promise(async (res, rej) => {
        try {
          if (!referrer) throw new Error("Referrer not found");
          setInProgress(true);
          const signature = await signMessage({
            message: referrer.toLowerCase(),
            account,
          });
          if (!signature) throw new Error("Signature not found");
          const { r: rr, s, v } = Signature.from(signature);
          if (!rr || !s || !v) throw new Error("Signature can not be splitted");
          const associated = await associateReferral({
            sender: account.address,
            code,
            rr: rr.slice(2),
            s: s.slice(2),
            v,
          });
          res(associated);
          close();
        } catch (error) {
          rej(error);
        } finally {
          setInProgress(false);
        }
      }),
      {
        loading: "Loading...",
        success: "Referrer confirmed",
        error: (e) => `Confirmation failed: ${e.message ?? "Unknown error"}`,
      },
    );
  }

  if (isLoading)
    return (
      <div className="flex h-20 items-center justify-center">
        <LoadingIndicator />
      </div>
    );

  if (isError || (isSuccess && !referrer))
    return (
      <div className="flex h-20 items-center justify-center">
        <p className="font-chicago">Ups something went wrong</p>
        <p className="text-xs">{error?.message ?? "Unknown error"}</p>
      </div>
    );

  return (
    <div className="flex flex-col items-center justify-center gap-5">
      <div className="flex flex-col items-center justify-center gap-2">
        <p className="font-geneva uppercase">You are referred by</p>
        <span className="bg-9yellow px-2 py-1 text-xs text-9black">
          {referrer}
        </span>
      </div>
      <Button
        size={"xlarge"}
        disabled={inProgress}
        onClick={signAndConfim}
        intent={"cta"}
        title={inProgress ? "Loading..." : "SIGN AND CONFIRM"}
        className="w-full"
      />
      <TabGroup className={"w-full"}>
        <TabList className={"flex items-center justify-center"}>
          <Tab as={Fragment}>
            {(props) => <TabButton title="How It Works" {...props} />}
          </Tab>
          <Tab as={Fragment} disabled>
            {(props) => <TabButton title="Fees Generated" {...props} />}
          </Tab>
        </TabList>
        <TabPanels>
          <TabPanel>
            <div className="w-full rounded-tl-none border border-9black bg-9gray p-3 shadow-9orderSummary md:p-5">
              <div className="flex flex-col items-center justify-center gap-4 font-chicago">
                <div className="flex items-center justify-between gap-4">
                  <div className="flex items-center gap-1 text-xs">
                    <div className="flex size-4 items-center justify-center gap-2 rounded-full border border-9black">
                      1
                    </div>
                    <span>Sign and confirm.</span>
                  </div>
                  <div className="flex items-center gap-1 text-xs">
                    <div className="flex size-4 items-center justify-center rounded-full border border-9black">
                      2
                    </div>
                    <span>Let your referrer earn</span>
                  </div>
                </div>
                <p className="bg-9green px-4 py-2 text-sm">
                  Referrer gets %1 of fees generated by you
                </p>
                <p className="text-xs text-9black/60">
                  You can create your own referral code to earn rewards!
                </p>
              </div>
            </div>
          </TabPanel>
        </TabPanels>
      </TabGroup>
    </div>
  );
}
