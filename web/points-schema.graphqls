
type Mutation {
  """
  Authenticate with the info service using the key given. Secret string that should be set
  with Authorization.
  """
  auth(key: String!): String

  """
  Add achievement for an address or Discord handle given.
  """
  addAchievement(
    """
    Wallet address to associate this achievement with.
    """
    address: String,

    """
    Discord username to associate this achievement with. Must be address or this.
    """
    discordUsername: String,

    """
    Name of the achievement to give.
    """
    name: String!,

    """
    Amount of the achievement that was won.
    """
    count: Int
  ): Boolean!

  """
  Add a connected wallet achievement for a specific product. Does so without
  any verification.
  """
  tagConnectedWallet(wallet: String!, product: String!): Boolean!

  """
  Register a Discord username with an address given.
  """
  registerDiscord(
    """
    Address owned by the Discord handle given.
    """
    address: String!,

    """
    Discord username to associate the address with.
    """
    discord: String!,

    """
    Signature that verifies the ownership and relationship. Hex encoded.
    """
    sig: String!
  ): Boolean!

  """
  Calculate points based on the data lake available. Does so using a function with an
  advisory lock. Can only be used by an authenticated user sending a Authentication token.
  """
  calculatePoints(yes: Boolean!): Boolean!
}

type Query {
  """
  Get points for the address given.
  """
  points(wallet: String!): Points!

  """
  Get achievements for the address given, or the category.
  If the product is requested, then the count will be 0.
  """
  achievements(wallet: String): [Achievement!]!

  """
  Gets a sorted ranking of the address * achievement count for a specific product.
  """
  leaderboards(product: String!, season: Int): [Leaderboard!]!

  """
  Number of users who used this product.
  """
  productUserCount(product: String!): Int!
}

type Points {
  """
  ID of the points of the form "address"
  """
  id: ID!

  """
  Amount of points that're given to this user so far.
  """
  amount: Int!
}

type Achievement {
  id: ID!

  """
  Name of the achievement earned.
  """
  name: String

  """
  Number of the achievement that was won. May be a unscaled number.
  """
  count: Int!

  """
  Whether this achievement counts the amount of interactions with it, or its a one time
  interaction. It might be better to not display the count of in a "this is how many
  people have this" context if it's the former.
  """
  shouldCountMatter: Boolean!

  """
  Is the count financial? This could dissuade the UI from displaying this item if so. Or,
  enabling some scaling functionality.
  """
  isCountFinancial: Boolean!

  """
  The descirption of this achievement.
  """
  description: String!

  """
  Product that this achievement was for.
  """
  product: String!

  """
  The season that this achievement is for.
  """
  season: Int!

  """
  The amount of scoring for this achievement. NOTE THAT THESE ARE NOT POINTS!
  """
  scoring: Float!
}

type Leaderboard {
  id: ID!

  """
  The product this leaderboard is for. Could be 9lives or longtail.
  """
  product: String!

  """
  The amount of items in this leaderboard.
  """
  items: [LeaderboardItem!]!
}

type LeaderboardItem {
  id: ID!

  """
  The wallet that sits in the leaderboard this way.
  """
  wallet: String!

  """
  The ranking of the wallet. Ie, 1 for first place (the top).
  """
  ranking: Int!

  """
  The scoring of the wallet for their cumulative count achievement value.
  """
  scoring: Int!
}
