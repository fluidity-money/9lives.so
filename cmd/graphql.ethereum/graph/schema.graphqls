
type Query {
  """
  Details that should be sent to the users (ie, where are the contracts living?)
  """
  contracts: Contracts!

  """
  Frontpage display. Should have a timeline as to when it should and should
  not be displayed.
  """
  frontpage: [Frontpage!]!
}

"""
Contracts that are relevant to the frontend for tasks including deriving
addresses of contracts to question for contract details without the graph.
Also needed to create new campaigns.
"""
type Contracts {
  """
  fUSDC address that's used to settle all transactions.
  """
  fusdcAddr: String!

  """
  Factory address that creates Trading contracts.
  """
  factoryAddr: String!
}

"""
Frontpage that should be displayed for a time window.
"""
type Frontpage {
  """
  ID that's used to cache this frontend data.
  """
  id: ID!

  """
  From when this should be displayed (timestamp)!
  """
  from: Int!

  """
  Until when this should be displayed (timestamp)!
  """
  until: Int!

  """
  Categories that should be displayed on the frontend in the list.
  """
  categories: [String!]!

  """
  Campaigns displayed left from right in the grid format.
  """
  campaigns: [Campaign!]!
}

"""
Outcome associated with a Campaign creation that's notified to the graph.
"""
input OutcomeInput {
  """
  Name of the campaign outcome. Ie, "Donald Trump" for the election.
  """
  name: String!

  """
  Text description of the outcome.
  """
  description: String!

  """
  Randomly chosen seed for the creation of the identifier.
  """
  seed: Int!
}

type Mutation {
  """
  "Explain" a campaign, so an on-chain campaign creation is listed in the frontend. Campaign is then spooled in a would-be frontend aggregation table.
  """
  explainCampaign(
    """
    Type of the modification to the campaign explanation.
    """
    type: Modification!,

    """
    Name of the campaign.
    """
    name: String!,

    """
    Description of the campaign.
    """
    description: String!,

    """
    Randomly chosen seed for the creation of the identifier.
    """
    seed: Int!

    """
    Outcomes associated with this campaign. An outcome can either be something like
    Trump winning the election, or something else.
    """
    outcomes: [OutcomeInput!]!,

    """
    Expected ending timestamp.
    """
    ending: Int!,

    """
    Creator address. Hex encoded. Verified to be the creator later.
    """
    creator: String!
  ): Boolean
}

"""
Ongoing prediction market competition.
"""
type Campaign {
  """
  Name of the campaign. Also used to look up the campaign based on the slug
  if needed (hyphenated).
  """
  name: String!

  """
  Description of the campaign in simple text.
  """
  description: String!

  """
  Creator of the campaign.
  """
  creator: Wallet!

  """
  Oracle that can decide if a winner happened.
  """
  oracle: String!

  """
  Identifier that's used to do offline derivation of the campaign pool,
  and the outcome shares. Is keccak256(concatenated outcome ids)[:8].
  """
  identifier: String!

  """
  Pool address to purchase shares, and to receive the cost function.
  """
  poolAddress: String!

  """
  Outcomes associated with this campaign. If there are only two, it defaults
  to a "yes", or "no".
  """
  outcomes: [Outcome!]!
}

type Outcome {
  """
  Campaign this outcome is associated with.
  """
  campaign: Campaign!

  """
  Name of this campaign.
  """
  name: String!

  """
  Text description of this campaign.
  """
  description: String!

  """
  Address of the creator.
  """
  creator: Wallet!

  """
  Identifier hex encoded associated with this outcome. Used to derive addresses.
  Is of the form keccak256("o" . name . "d" . description . "s" . seed)[:8]
  """
  identifier: String!

  """
  Share address to trade this outcome.
  """
  share: Share!
}

"""
Wallet of the creator.
"""
type Wallet {
  """
  Wallet address of this wallet, in hex.
  """
  address: String!
}

"""
Share representing the outcome of the current amount.
"""
type Share {
  """
  ERC20 address of this campaign.
  """
  address: String!
}

"""
HTTP-like interface for mutation. Either a delete, a logical update, or a put for the
first time.
"""
enum Modification {
  """
  Delete this modification.
  """
  DELETE,

  """
  Create this modification.
  """
  PUT
}
