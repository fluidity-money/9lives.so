package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/fluidity-money/9lives.so/cmd/graphql.ethereum/graph/model"
	"github.com/fluidity-money/9lives.so/lib/features"
	"github.com/fluidity-money/9lives.so/lib/types"
)

// ExplainCampaign is the resolver for the explainCampaign field.
func (r *mutationResolver) ExplainCampaign(ctx context.Context, typeArg model.Modification, name string, outcomes []model.OutcomeInput, ending int, text string, seed int, creator string, sR string, s string, v string) (*bool, error) {
	/*
	Do the following:

	1. Check the user's signature. Check that they created the campaign details.
	2. Check that the campaign exists on-chain. Check that the factory knows of its existence.
	3. Take the information that was given, and add it to the database!

	Later, a member of the moderation team will configure the display of the frontpage column.
	*/

	// First, concatenate the outcome details that were submitted.

	// Then, get the keccak256 hash of the sorting and concatenation.

	// Then, derive the on-chain address from this info of the trading pool.

	// Then, check on-chain to see if it exists.

	// If it does, then log the existence of the pool in the database!

	return false, nil
}

// Campaigns is the resolver for the campaigns field.
func (r *queryResolver) Campaigns(ctx context.Context) ([]types.Campaign, error) {
	if r.F.Is(features.FeatureGraphqlMockGraph) {
		return MockGraphCampaigns()
	}
	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
